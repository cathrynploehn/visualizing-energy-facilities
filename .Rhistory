# Calculate node size
# We'll interpolate node size based on the node betweenness centrality, using the "approx" function
# And we will assign a node size for each node based on its betweenness centrality
approxVals <- approx(c(0.5, 1.5), n = length(unique(node.list$bet)))
nodes_size <- sapply(node.list$bet, function(x) approxVals$y[which(sort(unique(node.list$bet)) == x)])
node.list <- cbind(node.list, size = nodes_size)
rm(approxVals, nodes_size)
# Define node color
# We'll interpolate node colors based on the node degree using the "colorRampPalette" function from the "grDevices" library
library("grDevices")
############################################################################################
# Match relevant nodes from the node list
matchedNodeList <- merge(node.list, dataSetNodes, by.x = "name", by.y = "V1", type = "left", match="all")
############################################################################################
#Create a hive plot
source("mod.edge2HPD.R")
hive1 <- mod.edge2HPD(edge_df = dataSet.ext[, 1:2], edge.color = dataSet.ext[, 3],
node.size = node.list[,c("name", "size")],
node.color = matchedData[,c("name", "V3")],
node.radius = node.list[,c("name", "degree")],
axis.cols = c("white", "white"),
node.axis = matchedData[,c("name", "V4")])
sumHPD(hive1)
# Assign nodes to a radius based on their degree (number of edges they are touching)
hive2 <- mineHPD(hive1, option = "rad <- tot.edge.count")
# Remove orphans
hive3 <- mineHPD(hive2, option = "remove orphans")
# Removing zero edges for better visualization
hive4 <- mineHPD(hive3, option = "remove zero edge")
# Assign nodes to axes based on their position in the edge list
# (this function assumes direct graphs, so it considers the first column to be a source and second column to be a sink )
#hive4 <- mineHPD(hive3.5, option = "axis <- source.man.sink")
print("---- BEGIN plot hive -----")
start.time <- Sys.time()
paste("Hello", "world", sep=" ")
#pdf('mal-followings-small.pdf', width=8, height=8)
# And finally, plotting our graph (Figure 1)
plotHive(hive4, ch = .15,
method = "norm",
bkgnd = "white",
#axLabs = c("source", "sink"),
#axLab.pos = .5,
#arrow = c("radius units", 0, 10, 560, 125, 140))
#dev.off()
setwd("C:/Users/Cat/Dropbox/igraph hive plots")
setwd("C:/Users/Cat/Dropbox/igraph hive plots")
library("igraph")
library("plyr")
library("HiveR")
library("RColorBrewer")
rm(list = ls())
#import edge files
dataSeta <- read.table("data/followings_mal2.txt", header = FALSE, sep = "\t") #read in edge data
dataSetb <- read.table("data/followings_norm2.txt", header = FALSE, sep = "\t")
dataSetc <- read.table("data/followers_mal2.txt", header = FALSE, sep = "\t") #read in edge data
dataSetd <- read.table("data/followers_norm2.txt", header = FALSE, sep = "\t")
#Merge edge files together
dataSete <- rbind(dataSeta, dataSetc) #mal followings/followers
dataSetf <- rbind(dataSetb, dataSetd) #norm followings/followers
dataSetg <- rbind(dataSete, dataSetf) #all
rm(dataSeta, dataSetb, dataSetc, dataSetd, dataSete, dataSetf)
#import node files
dataSetNodes1 <- read.table("data/known_ids.txt", header = FALSE, sep = "\t") #read in user data
dataSetNodes2 <- read.table("data/unknown_ids.txt", header = FALSE, sep = "\t") #read in user data
dataSetNodes2 <- unique(dataSetNodes2)
dataSetNodes <- rbind(dataSetNodes1, dataSetNodes2) #all
#generate list of nodes used in edge files
nodesUsed0 <- merge(dataSetNodes, dataSetg, by.x=c("V1"), by.y=c("V1"), all=FALSE)
myvars <- c("V1", "V2.x",  "V3.x",  "V4.x") #columns to be included
nodesUsed1 <- nodesUsed0[myvars]
nodesUsed <- unique(nodesUsed1) #nodes to be sampled from
rm(nodesUsed1, nodesUsed0, myvars)
#plot.TwitterHivePlot <- function(graphSize = NULL, graphName = NULL)
#{
graphSize <- 3
graphName <- "3Nodes"
for (i in seq(1,3,1) ) {
############################################################################################
print("---- BEGIN <TwitterHivePlot.R> -----")
# Track start time
print("---- BEGIN create graph data -----")
start.time <- Sys.time()
#sample list of nodes
nodesUsedSample1 <- nodesUsed[sample(1:nrow(nodesUsed), size = graphSize, replace = FALSE, prob = NULL),] #sample edge data
nodesUsedSample <- nodesUsedSample1[c(1)]
rm(nodesUsedSample1)
#generate edge file of sampled nodes
dataSet3 <- merge(dataSetg, nodesUsedSample, by.x=c("V1"), by.y=c("V1"), match="all", all=FALSE, row.names=NULL)
dataSet2 <- unique(dataSet3)
myvars <- c("V1", "V2",  "V3", "V4") #columns to be included
dataSet4 <- dataSet2[myvars]
dataSet <- data.frame(dataSet4, row.names = NULL)
rm(dataSet2, dataSet3, dataSet4)
############################################################################################
# Create a graph. Use simplify to ensure that there are no duplicated edges or self loops
gD <- simplify(graph.data.frame(dataSet, directed=FALSE))
gDNodes <- simplify(graph.data.frame(dataSet, directed=FALSE))
# Print number of nodes and edges
vcount(gD)
ecount(gD)
end.time <- Sys.time()
time.taken <- start.time - end.time
print(time.taken)
print("---- END create graph data -----")
print("---- BEGIN Edge degree -----")
start.time <- Sys.time()
# Calculate degree for all nodes
degAll <- degree(gD, v = V(gD), mode = "all")
print("---- END Edge degree -----")
print("---- BEGIN betweeness -----")
# Calculate betweenness for all nodes
betAll <- betweenness(gD, v = V(gD), directed = TRUE) / (((vcount(gD) - 1) * (vcount(gD)-2)) / 2)
betAll.norm <- (betAll - min(betAll))/(max(betAll) - min(betAll))
print("---- END betweeness -----")
node.list <- data.frame(name = V(gD)$name, degree = degAll, betw = betAll.norm)
matchedData <- merge(node.list, dataSetNodes, by.x = "name", by.y = "V1", type = "left", match="all") #store node data based on which nodes have been sampled
# Calculate Dice similarities between all pairs of nodes
#dsAll <- similarity.dice(gD, vids = V(gD), mode = "all")
# Calculate edge weight based on the node similarity
#F1 <- function(x) {data.frame(V4 = dsAll[which(V(gD)$name == as.character(x$V1)), which(V(gD)$name == as.character(x$V2))])}
#dataSet.ext <- ddply(dataSet, .variables=c("V1", "V2", "V3"), function(x) data.frame(F1(x)))
rm(degAll, betAll, betAll.norm)
end.time <- Sys.time()
time.taken <- start.time - end.time
print(time.taken)
print("---- END Edge degree, betweeness -----")
############################################################################################
print("---- BEGIN Node size calculation -----")
start.time <- Sys.time()
# Calculate node size
# We'll interpolate node size based on the node betweenness centrality, using the "approx" function
# And we will assign a node size for each node based on its betweenness centrality
approxVals <- approx(c(0.5, 1.5), n = length(unique(node.list$bet)))
nodes_size <- sapply(node.list$bet, function(x) approxVals$y[which(sort(unique(node.list$bet)) == x)])
node.list <- cbind(node.list, size = nodes_size)
rm(approxVals, nodes_size)
############################################################################################
# Match relevant nodes from the node list
matchedNodeList <- merge(node.list, dataSetNodes, by.x = "name", by.y = "V1", type = "left", match="all")
############################################################################################
#Create a hive plot
source("scripts/mod.edge2HPD.R")
source("scripts/mod.mineHPD.R")
print("---- BEGIN HPD conversion -----")
start.time <- Sys.time()
edge_color <- dataSet[c("V3")]
hive1 <- mod.edge2HPD(edge_df = dataSet[,c("V1", "V2")], edge.color = edge_color[,1],
node.size = node.list[,c("name", "size")],
node.color = matchedData[,c("name", "V3")],  #node color
node.radius = node.list[,c("name", "degree")],
axis.cols = c("white", "white"),          #make axes white
node.axis = matchedData[,c("name", "V4")] #turn this on or off depending if axes should be pre-defined
)
sumHPD(hive1)
end.time <- Sys.time()
time.taken <- start.time - end.time
print(time.taken)
print("---- BEGIN Radius assignment -----")
# Assign nodes to a radius based on their degree (number of edges they are touching)
hive2 <- mineHPD(hive1, option = "rad <- tot.edge.count")
# Remove orphans
hive3 <- mineHPD(hive2, option = "remove orphans")
# Removing zero edges for better visualization
hive3.5 <- mineHPD(hive3, option = "remove zero edge")
print("---- BEGIN source manager sink assignment -----")
# Assign nodes to axes based on their position in the edge list
# (this function assumes direct graphs, so it considers the first column to be a source and second column to be a sink )
start.time <- Sys.time()
hive4 <- mineHPD(hive3.5, option = "axis <- source.man.sink")
rm(hive3.5, hive3, hive2, hive1)
end.time <- Sys.time()
time.taken <- start.time - end.time
print(time.taken)
print("---- END HPD conversion -----")
print("---- BEGIN plot hive -----")
start.time <- Sys.time()
file <- paste(graphName, "ALL", sep="")
file <- paste(file, i, sep="-")
file <- paste(file, ".pdf", sep="")
pdf(file, width=8, height=8)
# And finally, plotting our graph (Figure 1)
plotHive(hive4, ch = .15,
method = "norm",
bkgnd = "white",
#axLabs = c("source", "sink"),
#axLab.pos = .5,
arrow = c("radius units", 0, 10, 560, 125, 140))
dev.off
# Display time taken
end.time <- Sys.time()
time.taken <- start.time - end.time
print(time.taken)
print("---- END plot hive -----")
}
#}
library(datasets)
data(iris)
head(iris)
h <- iris[Species = "virginica"]
h <- iris[Species = "virginica",]
h <- iris[iris$Species = "virginica",]
h <- iris[Species == "virginica",]
h <- iris[iris$Species == "virginica",]
h <- mean(h[Sepal.Length])
h <- mean(h["Sepal.Length"])
h$Sepal.Length
h
h <- iris[iris$Species == "virginica",]
h
h <- iris[iris$Species == "virginica",c("Sepal.Length")]
h
h <- mean(h)
h
l <- apply(iris[,1:4], 2, mean)
l
data(mtcars)
?tapply
sapply(split(mtcars$mpg, mtcars$cyl), mean)
head(mtcars)
names(mtcars$cyl)
d <- sapply(split(mtcars$mpg, mtcars$cyl), mean)
class(d)
d
d[1]
d[3]
d[3] - d[1]
debug(ls)
ls
ls()
quit()
1
2
2
3
d <- sapply(split(mtcars$horsepower, mtcars$cyl), mean)
mtcars
d <- sapply(split(mtcars$hp, mtcars$cyl), mean)
d
d[3] - d[1]
## Create a matrix object with a cached inverse
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL # Initial value for the inverse is NULL
set <- function(z) {
x <<- z
inv <<- NULL # A new matrix value will reset the inverse value
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
# Create list object
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Return current inverse value or cache a new inverse value for a matrix
cacheSolve <- function(x, ...) {
inv <- x$getinverse() # Get inverse value of the function
# If inverse is cached, return it
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
## Calculate and return inverse of 'x'
inv <- solve(data)
x$setinverse(inv)
inv
}
y <- makeCacheMatrix(matrix(1:16, ncol=2))
matrix(1:16, ncol=2)
matrix(1:2, ncol=2)
matrix(1:4, ncol=2)
y <- makeCacheMatrix(matrix(1:4, ncol=2))
cacheSolve(y)
cacheSolve(y)
y$getinverse
y$get
z <- y$getinverse
z
## Create a matrix object with a cached inverse
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL # Initial value for the inverse is NULL
set <- function(z) {
x <<- z
inv <<- NULL # A new matrix value will reset the inverse value
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() return(inv)
# Create list object
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Return current inverse value or cache a new inverse value for a matrix
cacheSolve <- function(x, ...) {
inv <- x$getinverse() # Get inverse value of the function
# If inverse is cached, return it
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
## Calculate and return inverse of 'x'
inv <- solve(data)
x$setinverse(inv)
inv
}
y <- makeCacheMatrix(matrix(1:4, ncol=2))
cacheSolve(y)
z <- y$getinverse
z
z <- y$getinverse()
z
y$get()
getinverse <- function() inv
## Create a matrix object with a cached inverse
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL # Initial value for the inverse is NULL
set <- function(z) {
x <<- z
inv <<- NULL # A new matrix value will reset the inverse value
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
# Create list object
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Return current inverse value or cache a new inverse value for a matrix
cacheSolve <- function(x, ...) {
inv <- x$getinverse() # Get inverse value of the function
# If inverse is cached, return it
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
## Calculate and return inverse of 'x'
inv <- solve(data)
x$setinverse(inv)
inv
}
y <- makeCacheMatrix(matrix(1:4, ncol=2))
y$get()
y$getinverse
y$getinverse()
cacheSolve(y)
y$getinverse()
install.packages("swirl")
library(swirl)
swirl()
5 + 7
x <- 5 + 7
x
y <- x-3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z*2+100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100)
z*2+1000
my_div
getwd()
ls()
x <- 9
ls()
dir()
?list.files
args()
args(list.files)
old.dir <- getWd()
old.dir <- getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
dir()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path('folder1', 'folder2')
?dir.create
dir.create("testdir2")
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
unlink("testdir2")
unlink("testdir2" recursive = TRUE)
unlink("testdir2", recursive = TRUE)
setwd(old.dir)
e
delete(testdir)
unlink('testdir')
unlink('testdir', recursive = TRUE)
read.csv('DEC_10_DP_DPDP1_with_ann')
setwd("~/VEGGIEWORLD/research/Energy Justice Network")
read.csv('DEC_10_DP_DPDP1_with_ann')
read.csv('DEC_10_DP_DPDP1_with_ann.csv')
demographics <- read.csv('DEC_10_DP_DPDP1_with_ann.csv')
names(demographics)
View(demographics)
race <- demographics[,c("HD02_S100", "HD02_S101", "HD02_S102", "HD02_S103", "HD02_S104", "HD02_S105", "HD02_S106")]
View(race)
race <- demographics[,c("GEO.id2","HD02_S100", "HD02_S101", "HD02_S102", "HD02_S103", "HD02_S104", "HD02_S105", "HD02_S106")]
View(race)
demographics <- read.csv('DEC_10_DP_DPDP1_with_ann.csv')
View(demographics)
race <- demographics[,c("GEO.id2","HD02_S100", "HD02_S101", "HD02_S102", "HD02_S103", "HD02_S104", "HD02_S105", "HD02_S106")]
View(race)
View(race)
race <- demographics[,c("GEO.id","HD02_S100", "HD02_S101", "HD02_S102", "HD02_S103", "HD02_S104", "HD02_S105", "HD02_S106")]
sink("demographics.csv")
cat(demographics)
write.csv(demographics, file = "demographics")
sink("demographics.json")
cat(toJSON(demographics))
sink()
library(jsonlite)
sink("demographics.json")
cat(toJSON(demographics))
sink()
rownames(race) <- race[,c("GEO.id")]
sink("race.json")
cat(toJSON(demographics, dataframe=c("rows")))
sink()
sink("race.json")
cat(toJSON(race, dataframe=c("rows")))
sink()
race = race[-1,]
race <- demographics[,c("GEO.id","HD02_S100", "HD02_S101", "HD02_S102", "HD02_S103", "HD02_S104", "HD02_S105", "HD02_S106")]
rownames(race) <- race[,c("GEO.id")]
race = race[-1,]
sink("race.json")
cat(toJSON(race, dataframe=c("rows"), pretty = TRUE))
sink()
cat(toJSON(race, dataframe=c("columns"), pretty = TRUE))
sink()
sink("race.json")
cat(toJSON(race, dataframe=c("columns"), pretty = TRUE))
sink()
sink("race.json")
cat(toJSON(race, dataframe=c("values"), pretty = TRUE))
sink()
cat(toJSON(race, dataframe=c("rows"), pretty = TRUE))
sink("race.json")
cat(toJSON(race, dataframe=c("rows"), pretty = TRUE))
sink()
json <- '  [
"0500000US01003": {
"GEO.id": "0500000US01003",
"HD02_S100": "87.0",
"HD02_S101": "9.9",
"HD02_S102": "1.3",
"HD02_S103": "1.0",
"HD02_S104": "0.1",
"HD02_S105": "2.2",
"HD02_S106": "100.0",
"_row": "0500000US01003"
},
"0500000US01003": {
"GEO.id": "0500000US01005",
"HD02_S100": "48.6",
"HD02_S101": "47.4",
"HD02_S102": "0.8",
"HD02_S103": "0.5",
"HD02_S104": "0.2",
"HD02_S105": "3.5",
"HD02_S106": "100.0",
"_row": "0500000US01005"
}
]'
frmjson <- fromJSON(json)
json <- '  {
"0500000US01003": {
"GEO.id": "0500000US01003",
"HD02_S100": "87.0",
"HD02_S101": "9.9",
"HD02_S102": "1.3",
"HD02_S103": "1.0",
"HD02_S104": "0.1",
"HD02_S105": "2.2",
"HD02_S106": "100.0",
"_row": "0500000US01003"
},
"0500000US01004": {
"GEO.id": "0500000US01005",
"HD02_S100": "48.6",
"HD02_S101": "47.4",
"HD02_S102": "0.8",
"HD02_S103": "0.5",
"HD02_S104": "0.2",
"HD02_S105": "3.5",
"HD02_S106": "100.0",
"_row": "0500000US01005"
}
}'
frmjson <- fromJSON(json)
raceList <- setNames(split(race, seq(nrow(race))), rownames(race))
cat(toJSON(race, dataframe=c("rows"), pretty = TRUE))
cat(toJSON(raceList, dataframe=c("rows"), pretty = TRUE))
sink("race.json")
cat(toJSON(raceList, dataframe=c("rows"), pretty = TRUE))
sink()
